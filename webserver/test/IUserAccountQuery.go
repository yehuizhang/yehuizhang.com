// Code generated by mockery v2.20.0. DO NOT EDIT.

package test

import (
	context "context"

	account "yehuizhang.com/go-webapp-gin/pkg/dao/user/account"

	mock "github.com/stretchr/testify/mock"
)

// IUserAccountQuery is an autogenerated mock type for the IUserAccountQuery type
type IUserAccountQuery struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, input
func (_m *IUserAccountQuery) Create(ctx context.Context, input *account.SignUpForm) (string, int) {
	ret := _m.Called(ctx, input)

	var r0 string
	var r1 int
	if rf, ok := ret.Get(0).(func(context.Context, *account.SignUpForm) (string, int)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *account.SignUpForm) string); ok {
		r0 = rf(ctx, input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *account.SignUpForm) int); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

// GetByUsername provides a mock function with given fields: ctx, username
func (_m *IUserAccountQuery) GetByUsername(ctx context.Context, username string) (*account.UserAccount, int) {
	ret := _m.Called(ctx, username)

	var r0 *account.UserAccount
	var r1 int
	if rf, ok := ret.Get(0).(func(context.Context, string) (*account.UserAccount, int)); ok {
		return rf(ctx, username)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *account.UserAccount); ok {
		r0 = rf(ctx, username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*account.UserAccount)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) int); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Get(1).(int)
	}

	return r0, r1
}

type mockConstructorTestingTNewIUserAccountQuery interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUserAccountQuery creates a new instance of IUserAccountQuery. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUserAccountQuery(t mockConstructorTestingTNewIUserAccountQuery) *IUserAccountQuery {
	mock := &IUserAccountQuery{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
